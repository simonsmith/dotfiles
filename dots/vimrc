lua << EOF


local vim = vim
local Plug = vim.fn["plug#"]

vim.call("plug#begin", "~/.config/nvim/plugged")

-- Theme
Plug("folke/tokyonight.nvim")

-- Tmux
if vim.fn.executable("tmux") == 1 then
  Plug("christoomey/vim-tmux-navigator")
  Plug("tmux-plugins/vim-tmux-focus-events")
end

-- Finding and replacing
Plug("junegunn/fzf", { ["dir"] = "~/.fzf", ["do"] = "./install --all" })
Plug("ibhagwan/fzf-lua", { ["branch"] = "main" })
Plug("nvim-tree/nvim-web-devicons")
Plug("echasnovski/mini.nvim")

-- Editor improvements
Plug("gcmt/taboo.vim")
Plug("hoob3rt/lualine.nvim")
Plug("rcarriga/nvim-notify")
Plug("MunifTanjim/nui.nvim")
Plug("folke/noice.nvim")
Plug("folke/which-key.nvim")
Plug("MeanderingProgrammer/render-markdown.nvim")

-- File management
Plug("mcchrish/nnn.vim")

-- Buffers
Plug("schickling/vim-bufonly")
Plug("moll/vim-bbye")

-- Search
Plug("nvim-lua/plenary.nvim")
Plug("nvim-pack/nvim-spectre")
Plug("linrongbin16/gitlinker.nvim")
Plug("nvim-treesitter/nvim-treesitter", { ["do"] = ":TSUpdate" })

-- Editing
Plug("tpope/vim-repeat")
Plug("b3nj5m1n/kommentary")
Plug("Valloric/ListToggle")
Plug("kevinhwang91/nvim-bqf")
Plug("yssl/QFEnter")
Plug("matze/vim-move")
Plug("jiangmiao/auto-pairs")
Plug("zbirenbaum/copilot.lua")
Plug("wuelnerdotexe/vim-astro")
Plug('stevearc/conform.nvim')

-- Text objects
Plug("chaoren/vim-wordmotion")
Plug("wellle/targets.vim")
Plug("kana/vim-textobj-user")
Plug("kana/vim-textobj-entire")
Plug("kana/vim-textobj-line")

-- General
Plug("ntpeters/vim-better-whitespace")

-- Refactoring
Plug("tpope/vim-surround")

-- Copy/Paste behavior
Plug("svermeulen/vim-cutlass")
Plug("svermeulen/vim-subversive")

-- Sessions
Plug("xolox/vim-misc")
Plug("xolox/vim-session")

-- Git
Plug("tpope/vim-fugitive")
Plug("junegunn/gv.vim")
Plug("lewis6991/gitsigns.nvim")

-- HTML/CSS
Plug("mattn/emmet-vim")
Plug("alvan/vim-closetag")
Plug("rrethy/vim-hexokinase", { ["do"] = "make hexokinase" })
Plug("jwalton512/vim-blade")

-- JavaScript
Plug("neoclide/coc.nvim", { ["branch"] = "release" })
Plug("neoclide/coc-tsserver", { ["do"] = "yarn install --frozen-lockfile" })
Plug("yaegassy/coc-astro", { ["do"] = "yarn install --frozen-lockfile" })
Plug("neoclide/coc-eslint", { ["do"] = "yarn install --frozen-lockfile" })
Plug("neoclide/coc-json", { ["do"] = "yarn install --frozen-lockfile" })
Plug("neoclide/coc-css", { ["do"] = "yarn install --frozen-lockfile" })
Plug("bmatcuk/coc-stylelintplus", { ["do"] = "yarn install --frozen-lockfile" })
Plug("antonk52/coc-cssmodules", { ["do"] = "yarn install --frozen-lockfile" })
Plug("neoclide/coc-yaml", { ["do"] = "yarn install --frozen-lockfile", ["for"] = "yaml" })
Plug("neoclide/coc-html", { ["do"] = "yarn install --frozen-lockfile" })
Plug("yaegassy/coc-laravel", { ["do"] = "yarn install --frozen-lockfile" })
Plug("yaegassy/coc-blade", { ["do"] = "yarn install --frozen-lockfile" })
Plug("yaegassy/coc-intelephense", { ["do"] = "yarn install --frozen-lockfile" })
Plug("yaegassy/coc-tailwindcss3", { ["do"] = "yarn install --frozen-lockfile" })

-- End vim-plug setup
vim.call("plug#end")

-- Colorscheme
vim.cmd("silent! colorscheme tokyonight-moon")

-- Enable term 24-bit color
vim.opt.termguicolors = true

require'nvim-web-devicons'.setup()

require("noice").setup({
  notify = {
    enabled = false,
  },
  routes = {
    { filter = { event = "msg_show", kind = "", find = "written", },  skip = true },
    { filter = { event = "msg_show", kind = "", },  skip = true },
    { filter = { event = "msg_show", kind = "lua_error", },  view = "mini" },
    { filter = { find = "Hunk" }, skip = true },

    -- no write since save
    { filter = { find = "E37" }, skip = true },
    { filter = { find = "E162" }, view = "mini" },
  },
  presets = {
    command_palette = true, -- position the cmdline and popupmenu together
    long_message_to_split = true, -- long messages will be sent to a split
  },
})

require('copilot').setup({
  suggestion = {
    enabled = true,
    auto_trigger = false,
    keymap = {
      accept = '<Tab>',
      next = '<C-j>',
      prev = '<C-k>',
    }
  },
})

local actions = require "fzf-lua.actions"
require'fzf-lua'.setup({
  winopts = {
    height = 0.9,
    width = 0.8,
    preview = {
      default = 'bat'
    }
  },
  files = {
    rg_opts = [[--color=never --files --hidden --follow -g "!.git"]],
    fd_opts = [[--color=never --type f --hidden --follow --exclude .git]],
    git_icons = true
  },
  actions = {
    files = {
      ["default"] = actions.file_edit,
      ["ctrl-v"] = actions.file_vsplit
    }
  }
})

require("tokyonight").setup({
  style = "moon", -- The theme comes in three styles, `storm`, `moon`, a darker variant `night` and `day`
  light_style = "day", -- The theme is used when the background is set to light
  transparent = false, -- Enable this to disable setting the background color
  terminal_colors = true, -- Configure the colors used when opening a `:terminal` in [Neovim](https://github.com/neovim/neovim)
  styles = {
    -- Style to be applied to different syntax groups
    -- Value is any valid attr-list value for `:help nvim_set_hl`
    comments = { italic = false },
    keywords = { italic = false },
  },
  day_brightness = 0.2, -- Adjusts the brightness of the colors of the **Day** style. Number between 0 and 1, from dull to vibrant colors
  hide_inactive_statusline = false, -- Enabling this option, will hide inactive statuslines and replace them with a thin border instead. Should work with the standard **StatusLine** and **LuaLine**.
  dim_inactive = false, -- dims inactive windows
  lualine_bold = false, -- When `true`, section headers in the lualine theme will be bold

  --- You can override specific color groups to use other groups or a hex color
  --- function will be called with a ColorScheme table
  ---@param colors ColorScheme
  on_colors = function(colors) end,

  --- You can override specific highlights to use other groups or a hex color
  --- function will be called with a Highlights and ColorScheme table
  ---@param highlights Highlights
  ---@param colors ColorScheme
  on_highlights = function(highlights, colors) end,
})

require("conform").setup({
  formatters_by_ft = {
    ["javascript"] = {"biome", "prettier", stop_after_first = true},
    ["javascriptreact"] = {"biome", "prettier", stop_after_first = true},
    ["typescript"] = {"biome", "prettier", stop_after_first = true},
    ["typescriptreact"] = {"biome", "prettier", stop_after_first = true},
    ["json"] = {"biome", "prettier", stop_after_first = true},
    ["jsonc"] = {"biome", "prettier", stop_after_first = true},
    ["html"] = {"biome", "prettier", stop_after_first = true},
    ["css"] = {"biome", "prettier", stop_after_first = true},
    ["vue"] = {"prettier", stop_after_first = true},
    ["yaml"] = {"prettier", stop_after_first = true},
    ["markdown"] = {"prettier", "mdformat", stop_after_first = true},
    ["markdown.mdx"] = {"prettier", "mdformat", stop_after_first = true},
    ["lua"] = {"lua-format", stop_after_first = true},
    ["vim"] = {"lua-format", stop_after_first = true},
  },
})

vim.api.nvim_create_user_command("RunFormat", function(args)
  local range = nil
  if args.count ~= -1 then
    local end_line = vim.api.nvim_buf_get_lines(0, args.line2 - 1, args.line2, true)[1]
    range = {
      start = { args.line1, 0 },
      ["end"] = { args.line2, end_line:len() },
    }
  end
  require("conform").format({ async = true, lsp_format = "fallback", range = range })
end, { range = true })

vim.keymap.set('n', '<leader>p', ':RunFormat<CR>', { silent = true })

require'lualine'.setup {
  options = {
    icons_enabled = false,
    component_separators = {},
    section_separators = {},
    disabled_filetypes = {}
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch'},
    lualine_c = {
      {
        'filename',
        path = 1  -- 0 = just filename, 1 = relative path, 2 = absolute path
      }
    },
    lualine_x = {
      {
        require("noice").api.statusline.mode.get,
        cond = require("noice").api.statusline.mode.has,
        color = { fg = "#ff9e64" },
      }
    },
    lualine_y = {
      {
        'diagnostics',
        sources = {'coc'},
        sections = {'error', 'warn'},
        symbols = {error = 'coc errors: ', warn = 'warnings: ', info = 'info: '}
      }
    },
    lualine_z = {},
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {},
    lualine_x = {},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {},
  extensions = {}
}

require("notify").setup({
  timeout = 4000,
  stages = 'static'
})

require("gitlinker").setup({
  router = {
    browse = {
      ["^git%.treatwell%.net"] = require('gitlinker.routers').gitlab_browse,
    },
  }
})

require('render-markdown').setup({
  debounce = 20,
})

local wk = require("which-key")
wk.setup({
  show_help = false,
  plugins = { spelling = true },
})

-- Treat <li> and <p> tags like block tags
vim.g.html_indent_tags = "li|p"

-- Set <space> as the leader key
vim.g.mapleader = " "
vim.g.maplocalleader = "\\"

-- Turn off swapfiles and backups
vim.opt.swapfile = false
vim.opt.backup = false
vim.opt.writebackup = false

-- Allow editing of binary files
vim.opt.binary = true

-- Text width
vim.opt.textwidth = 80

-- Indent-based folding
vim.opt.foldmethod = "indent"
vim.opt.foldenable = false

-- Keep hidden buffers
vim.opt.hidden = true

-- Remember tab names in sessions
vim.opt.sessionoptions:append("tabpages,globals")

-- Match braces
vim.opt.showmatch = true

-- Hide the current mode
vim.opt.showmode = false

-- Limit syntax highlighting to avoid lag
vim.opt.synmaxcol = 500

-- Highlight the current line
vim.opt.cursorline = true

-- Indentation settings
vim.opt.softtabstop = 2
vim.opt.tabstop = 2
vim.opt.shiftwidth = 2
vim.opt.expandtab = true

-- Scrolling
vim.opt.sidescroll = 1
vim.opt.scrolloff = 3
vim.opt.sidescrolloff = 15

-- Disable line wrapping
vim.opt.wrap = false

-- Persistent cursor position in buffers
vim.opt.startofline = false

-- Show line and column numbers
vim.opt.ruler = true

-- Open new panes to the right and bottom
vim.opt.splitbelow = true
vim.opt.splitright = true

-- Search settings
vim.opt.ignorecase = true
vim.opt.smartcase = true

-- Use the OS clipboard
vim.opt.clipboard = "unnamedplus"

-- Spell checking
vim.opt.spelllang = "en"

-- Completion settings
vim.opt.complete:remove("i")
vim.opt.complete:append("kspell")
vim.opt.completeopt:remove("preview")

-- Update time for plugins like GitGutter
vim.opt.updatetime = 300

-- Always show the sign column
vim.opt.signcolumn = "yes"

-- Backup and undo history
vim.opt.backupdir = "$HOME/.config/nvim/backups"
vim.opt.directory = ".,$TEMP"
vim.opt.undofile = true
vim.opt.undolevels = 1000
vim.opt.undoreload = 10000

-- Modeline and security settings
vim.opt.modeline = true
vim.opt.modelines = 4
vim.opt.exrc = true
vim.opt.secure = true

-- Disable error bells
vim.opt.errorbells = false

-- Shorten startup messages
vim.opt.shortmess = "aoOtIWcFs"

-- Enable titles
vim.opt.title = true

-- Show command as it’s being typed
vim.opt.showcmd = true

-- Line numbers
vim.opt.number = true
vim.opt.relativenumber = true

-- Path and extensions for `gf`
vim.opt.suffixesadd:append(".css,index.css,.js,.jsx,.scss")
vim.opt.path:append(".,src")

-- Abbreviations for common typos
vim.cmd([[
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Qa q
cnoreabbrev Qall qall
]])

-- Key mappings
vim.keymap.set("n", "gv", ":vertical wincmd f<CR>")
vim.keymap.set("n", "<leader>w", ":silent wa<CR>")
vim.keymap.set("n", "k", "gk")
vim.keymap.set("n", "j", "gj")
vim.keymap.set("v", "k", "gk")
vim.keymap.set("v", "j", "gj")
vim.keymap.set("n", "dD", "S<Esc>")
vim.keymap.set("n", "Y", "y$")
vim.keymap.set("n", "g=", "gg=G``")
vim.keymap.set("v", "y", "y`]")
vim.keymap.set("v", "p", "p`]")
vim.keymap.set("n", "p", "p`]")

-- Split navigation
vim.keymap.set("n", "<leader>x", ":split<CR>")
vim.keymap.set("n", "<leader>v", ":vsplit<CR>")

-- Spellcheck toggle
vim.keymap.set("n", "<F6>", ":setlocal spell!<CR>")

-- Clear search highlighting
vim.keymap.set("n", "<leader>k", ":noh<CR>")

-- Visual mode indentation
vim.keymap.set("v", "<", "<gv")
vim.keymap.set("v", ">", ">gv")

-- Insert new line without entering insert mode
vim.keymap.set("n", "<CR>", "o<Esc>")

-- Autocommands
vim.api.nvim_create_autocmd("CmdwinEnter", {
  pattern = "*",
  callback = function() vim.api.nvim_set_keymap("n", "<CR>", "<CR>", { noremap = true }) end,
})
vim.api.nvim_create_autocmd("CmdwinLeave", {
  pattern = "*",
  callback = function() vim.api.nvim_set_keymap("n", "<CR>", "o<Esc>", { noremap = true }) end,
})

-- Open help in a vertical split
vim.api.nvim_create_augroup("vimrc_help", { clear = true })
vim.api.nvim_create_autocmd("BufEnter", {
  group = "vimrc_help",
  pattern = "*.txt",
  callback = function()
    if vim.bo.buftype == "help" then
      vim.cmd("wincmd L")
      vim.opt_local.relativenumber = true
    end
  end,
})

-- Hide cursorline when buffer is inactive
vim.api.nvim_create_augroup("CrossHair", { clear = true })
vim.api.nvim_create_autocmd({ "VimEnter", "WinEnter", "BufWinEnter" }, {
  group = "CrossHair",
  pattern = "*",
  callback = function()
    vim.opt_local.cursorline = true
  end,
})
vim.api.nvim_create_autocmd("WinLeave", {
  group = "CrossHair",
  pattern = "*",
  callback = function()
    vim.opt_local.cursorline = false
  end,
})

-- File type specific settings
vim.api.nvim_create_augroup("file_types", { clear = true })
vim.api.nvim_create_autocmd({ "BufNewFile", "BufRead" }, {
  group = "file_types",
  pattern = { "*.snap", "*.es6" },
  callback = function()
    vim.bo.filetype = "javascript.jsx"
  end,
})
vim.api.nvim_create_autocmd({ "BufNewFile", "BufRead" }, {
  group = "file_types",
  pattern = { "*stylelintrc", "*eslintrc", "*babelrc", "*parcelrc", "tsconfig.json" },
  callback = function()
    vim.bo.filetype = "json5"
  end,
})
vim.api.nvim_create_autocmd({ "BufNewFile", "BufRead" }, {
  group = "file_types",
  pattern = "*.md",
  callback = function()
    vim.opt_local.wrap = true
    vim.opt_local.linebreak = true
    vim.opt_local.spell = true
    vim.bo.filetype = "markdown"
  end,
})
vim.api.nvim_create_autocmd("FileType", {
  group = "file_types",
  pattern = "gitcommit",
  callback = function()
    vim.opt_local.textwidth = 72
    vim.opt_local.spell = true
  end,
})
vim.api.nvim_create_autocmd("FileType", {
  group = "file_types",
  pattern = { "css", "scss", "sass" },
  callback = function()
    vim.opt_local.iskeyword:append("-")
  end,
})

-- Periodically check for file changes
vim.api.nvim_create_augroup("checktime", { clear = true })
vim.api.nvim_create_autocmd("CursorHold", {
  group = "checktime",
  pattern = "*",
  command = "silent! checktime",
})

-- Automatically resize splits when Vim window changes size
vim.api.nvim_create_augroup("auto_resize", { clear = true })
vim.api.nvim_create_autocmd("VimResized", {
  group = "auto_resize",
  pattern = "*",
  command = "wincmd =",
})

-- Highlight settings
vim.api.nvim_set_hl(0, "DiffChange", { bg = "#511e1e", fg = "#eeeeee" })
vim.api.nvim_set_hl(0, "DiffDelete", { bg = "#3d432f", fg = "#eeeeee" })

require'nvim-treesitter.configs'.setup {
  -- A list of parser names, or "all" (the five listed parsers should always be installed)
  ensure_installed = {
    "css",
    "html",
    "javascript",
    "json",
    "typescript",
    "scss",
    "vue",
    "astro",
    "dockerfile",
    "tsx",
    "c",
    "lua",
    "vim",
    "vimdoc",
    "query",
    "gitcommit",
    "diff",
    "git_rebase",
    "git_config"
},

  -- Automatically install missing parsers when entering buffer
  -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
  auto_install = true,

  highlight = {
    enable = true,
  },
}

vim.keymap.set('n', '<leader>s', '<cmd>lua require("spectre").open()<CR>', {
  desc = "Open Spectre"
})
vim.keymap.set('n', '<leader>c', '<cmd>lua require("spectre").open_visual({select_word=true})<CR>', {
    desc = "Search current word"
})
require('spectre').setup({
  mappings={
    ['toggle_line'] = {
        map = "dd",
        cmd = "<cmd>lua require('spectre').toggle_line()<CR>",
        desc = "toggle current item"
    },
    ['enter_file'] = {
        map = "<cr>",
        cmd = "<cmd>lua require('spectre.actions').select_entry()<CR>",
        desc = "goto current file"
    },
    ['run_current_replace'] = {
      map = "<leader>rc",
      cmd = "<cmd>lua require('spectre.actions').run_current_replace()<CR>",
      desc = "replace current line"
    },
    ['run_replace'] = {
        map = "<leader>R",
        cmd = "<cmd>lua require('spectre.actions').run_replace()<CR>",
        desc = "replace all"
    },
  }
})

require('gitsigns').setup({
  signs = {
    add          = { text = '█' },
    change       = { text = '█' },
    delete       = { text = '█' },
    topdelete    = { text = '█' },
    changedelete = { text = '█' },
    untracked    = { text = '┆' },
  },
  on_attach = function(bufnr)
    local gs = package.loaded.gitsigns

    local function map(mode, l, r, opts)
      opts = opts or {}
      opts.buffer = bufnr
      vim.keymap.set(mode, l, r, opts)
    end

    -- Navigation
    map('n', ']c', function()
      if vim.wo.diff then return ']c' end
      vim.schedule(function() gs.next_hunk() end)
      return '<Ignore>'
    end, {expr=true})

    map('n', '[c', function()
      if vim.wo.diff then return '[c' end
      vim.schedule(function() gs.prev_hunk() end)
      return '<Ignore>'
    end, {expr=true})
  end
})

require('kommentary.config').configure_language("default", {
    prefer_single_line_comments = true,
})
EOF

" Plugin settings in Vim script
" ------------------------------------------------------------------------------

" Shortcut for checking if a plugin is loaded
function! s:has_plugin(plugin)
  let lookup = 'g:plugs["' . a:plugin . '"]'
  return exists(lookup)
endfunction

if exists(':tnoremap')
  " Allow movement seamlessly with terminals
  tnoremap <C-h> <C-\><C-n><C-w>h
  tnoremap <C-j> <C-\><C-n><C-w>j
  tnoremap <C-k> <C-\><C-n><C-w>k
  tnoremap <C-l> <C-\><C-n><C-w>l
  tnoremap <expr> <Esc> (&filetype == "fzf") ? "<Esc>" : "<c-\><c-n>"
endif

"  Plugin config
" ------------------------------------------------------------------------------
if s:has_plugin('vim-textobj-entire')
  let g:textobj_entire_no_default_key_mappings = 1
  xmap aE <Plug>(textobj-entire-a)
  omap aE <Plug>(textobj-entire-a)
  xmap iE <Plug>(textobj-entire-i)
  omap iE <Plug>(textobj-entire-i)
endif


if s:has_plugin('vim-slash')
  noremap <plug>(slash-after) zz
endif

if s:has_plugin('coc.nvim')
  " Remap keys for gotos
  nmap <silent> <leader>dr <Plug>(coc-references)
  nmap <silent> <leader>dR <Plug>(coc-refactor)
  nmap <silent> <leader>dd <Plug>(coc-implementation)
  nmap <silent> <leader>dy <Plug>(coc-type-definition)
  nmap <silent> <leader>dn <Plug>(coc-rename)
  nmap <silent> <leader>da <Plug>(coc-codeaction)
  nmap <silent> ]e :call CocAction('diagnosticNext')<cr>
  nmap <silent> [e :call CocAction('diagnosticPrevious')<cr>
  nmap <silent> <leader>e :CocDiagnostics<cr>


  " restart coc because it breaks so often
  nmap <silent> <leader>r :CocRestart<cr>

  hi CocCodeLens guifg=#3a445e
  hi DiagnosticUnderlineError cterm=undercurl gui=undercurl guisp=#f38ba8

  nmap <silent> <leader>uf :CocList snippets<cr>

  inoremap <expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<CR>"

  " documentation popup
  nnoremap <silent> K :call <SID>show_documentation()<CR>
  function! s:show_documentation()
    if &filetype == 'vim'
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction
endif

nmap <silent> <leader>p :RunFormat<cr>

if s:has_plugin('vim-subversive')
  nmap s <plug>(SubversiveSubstitute)
endif

if s:has_plugin('vim-cutlass')
  nnoremap m d
  xnoremap m d
  nnoremap mm dd
endif

if s:has_plugin('vim-bufonly')
  nnoremap <leader>B :BufOnly<cr>
endif

if s:has_plugin('ListToggle')
  let g:lt_location_list_toggle_map = '<leader>L'
endif

if s:has_plugin('vim-better-whitespace')
  highlight ExtraWhitespace ctermbg=red guibg = #e06c75
endif

if s:has_plugin('vim-astro')
  let g:astro_typescript = 'enable'
endif

if s:has_plugin('vim-session')
  let g:session_autosave = 'yes'
  let g:session_autoload = 'no'
endif

if s:has_plugin('vim-closetag')
  let g:closetag_filenames = "*.html,*.js,*.jsx"
  let g:closetag_close_shortcut = ''
endif

if s:has_plugin('vim-choosewin')
  let g:choosewin_label_fill = 0
  let g:choosewin_blink_on_land = 0
endif

if s:has_plugin('vim-bbye')
  nnoremap <silent>Q :silent Bdelete<cr>
endif

if s:has_plugin('taboo.vim')
  let g:taboo_renamed_tab_format = '%l%m'
  let g:taboo_close_tab_label = ''
  nnoremap th :tabprev<cr>
  nnoremap tl :tabnext<cr>
  nnoremap tn :tabnew<cr>
  nnoremap td :tabclose<cr>
  nnoremap to :TabooOpen<space>
  nnoremap tr :TabooRename<space>
endif

if s:has_plugin('nnn.vim')
  let g:nnn#set_default_mappings = 0
  nnoremap _ :NnnPicker %:p:h<cr>
  let g:nnn#command = 'nnn -d -H'
  let g:nnn#layout = 'enew'
  let g:nnn#action = {
        \ '<c-x>': 'split',
        \ '<c-v>': 'vsplit' }
endif

if s:has_plugin('gv.vim')
  nnoremap <c-g> :GV!<cr>
endif

if s:has_plugin('fzf-lua')
  nnoremap <c-p> :FzfLua files<cr>
  nnoremap <c-o> :FzfLua jumps<cr>
  nnoremap <Tab> :FzfLua buffers<cr>
  nnoremap <silent> <BS> :FzfLua command_history<cr>
endif

if s:has_plugin('ListToggle')
  let g:lt_height = 18
endif

if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag with ack.vim - https://github.com/ggreer/the_silver_searcher#vim
  let g:ackprg = 'ag --smart-case --nogroup --nocolor --column'
endif

if s:has_plugin('emmet-vim')
  imap hh <plug>(emmet-expand-abbr)
  let g:emmet_install_only_plug = 1
endif
