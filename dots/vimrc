"  Vim plug
" https://github.com/junegunn/vim-plug
" ------------------------------------------------------------------------------

let g:plugin_path = '~/.config/nvim/plugged'

call plug#begin(g:plugin_path)

" Theme
" ------------------------------------------------------------------------------

Plug 'f-person/auto-dark-mode.nvim'
Plug 'folke/tokyonight.nvim'
" tmux
" ------------------------------------------------------------------------------

if executable('tmux')
  " Navigate between vim and tmux splits
  Plug 'christoomey/vim-tmux-navigator'
  " Restore `FocusLost` and `FocusGained` events in tmux
  Plug 'tmux-plugins/vim-tmux-focus-events'
endif

" Finding and replacing
" ------------------------------------------------------------------------------

" Fuzzy finding anything
Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all'}
" fzf integration for Vim
Plug 'ibhagwan/fzf-lua', {'branch': 'main'}
Plug 'nvim-tree/nvim-web-devicons'


" Editor improvements
" ------------------------------------------------------------------------------
"
Plug 'ggandor/leap.nvim'
Plug 'gcmt/taboo.vim'
Plug 'hoob3rt/lualine.nvim'

Plug 'rcarriga/nvim-notify'
Plug 'MunifTanjim/nui.nvim'
Plug 'folke/noice.nvim'

" File management
" ------------------------------------------------------------------------------
Plug 'mcchrish/nnn.vim'

" Buffers
" ------------------------------------------------------------------------------

" Close all buffers except current
Plug 'schickling/vim-bufonly'
Plug 'moll/vim-bbye'

" Search
" ------------------------------------------------------------------------------

Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-pack/nvim-spectre'

Plug 'linrongbin16/gitlinker.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

" Editing
" ------------------------------------------------------------------------------

" Allow plugins to be repeated with dot
Plug 'tpope/vim-repeat'
" Comment out blocks of code
Plug 'b3nj5m1n/kommentary'
" Toggle location and quickfix lists
Plug 'Valloric/ListToggle'
" Display quickfix with a fancy window and commands
Plug 'kevinhwang91/nvim-bqf'
" Open files from Quickfix
Plug 'yssl/QFEnter'
" Move blocks of code with ALT+j/k
Plug 'matze/vim-move'
" Pairs
Plug 'jiangmiao/auto-pairs'
" copilot
Plug 'zbirenbaum/copilot.lua'
Plug 'wuelnerdotexe/vim-astro'

" Text objects
" ------------------------------------------------------------------------------

" Allow motions like `w`, `b` and `iw` to work on camel case
Plug 'chaoren/vim-wordmotion'
" Improve text objects for arguments, brackets etc
Plug 'wellle/targets.vim'
" Add various text objects
Plug 'kana/vim-textobj-user'
" aE
Plug 'kana/vim-textobj-entire'
" al
Plug 'kana/vim-textobj-line'

" General
" ------------------------------------------------------------------------------

" Whitespace removal
Plug 'ntpeters/vim-better-whitespace'

" Refactoring
" ------------------------------------------------------------------------------

" Make it easy to add/remove/change brackets, quotes etc
Plug 'tpope/vim-surround'

" Copy/Paste behaviour
" ------------------------------------------------------------------------------

" Stop everything saving to a register and instead rely on just `m` for cut
Plug 'svermeulen/vim-cutlass'
Plug 'svermeulen/vim-subversive'

" Sessions
" ------------------------------------------------------------------------------

Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'

" Tab bar
" ------------------------------------------------------------------------------

Plug 'neovim/nvim-lspconfig'
Plug 'SmiteshP/nvim-navic'
Plug 'utilyre/barbecue.nvim'

" Git
" ------------------------------------------------------------------------------

Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'
Plug 'lewis6991/gitsigns.nvim'

" HTML/CSS
" ------------------------------------------------------------------------------

Plug 'neovim/nvim-lspconfig'
Plug 'jose-elias-alvarez/null-ls.nvim'
Plug 'MunifTanjim/prettier.nvim'
" Easy HTML and CSS generation
Plug 'mattn/emmet-vim'
" Automatically add a closing HTML tag
Plug 'alvan/vim-closetag'
" Color highlight
Plug 'norcalli/nvim-colorizer.lua'

" JavaScript
" ------------------------------------------------------------------------------

" Autocomplete & linting
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
Plug 'yaegassy/coc-astro', {'do': 'yarn install --frozen-lockfile'}
Plug 'fannheyward/coc-deno', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-eslint', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-json', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-css', {'do': 'yarn install --frozen-lockfile'}
Plug 'bmatcuk/coc-stylelintplus', {'do': 'yarn install --frozen-lockfile'}
Plug 'antonk52/coc-cssmodules', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-yaml', {'do': 'yarn install --frozen-lockfile', 'for': 'yaml'}
Plug 'neoclide/coc-html', {'do': 'yarn install --frozen-lockfile'}
Plug 'yaegassy/coc-volar', {'do': 'yarn install --frozen-lockfile'}

call plug#end()

" Enable term 24 bit colour
set termguicolors

" Shortcut for checking if a plugin is loaded
function! s:has_plugin(plugin)
  let lookup = 'g:plugs["' . a:plugin . '"]'
  return exists(lookup)
endfunction

"  General config
" ------------------------------------------------------------------------------

lua << EOF

require'nvim-web-devicons'.setup()

require("noice").setup({
  notify = {
    enabled = false,
  },
  routes = {
    { filter = { event = "msg_show", kind = "", find = "written", },  skip = true },
    { filter = { event = "msg_show", kind = "", },  skip = true },
    { filter = { event = "msg_show", kind = "lua_error", },  view = "mini" },
    { filter = { find = "Hunk" }, skip = true },

    -- no write since save
    { filter = { find = "E37" }, skip = true },
    { filter = { find = "E162" }, view = "mini" },
  },
  presets = {
    command_palette = true, -- position the cmdline and popupmenu together
    long_message_to_split = true, -- long messages will be sent to a split
  },
})

require('copilot').setup({
  suggestion = {
    enabled = true,
    auto_trigger = true,
    keymap = {
      accept = '<Tab>',
    }
  },
})

require('colorizer').setup()

local actions = require "fzf-lua.actions"
require'fzf-lua'.setup({
  winopts = {
    height = 0.9,
    width = 0.8,
    preview = {
      default = 'bat'
    }
  },
  actions = {
    files = {
      ["default"] = actions.file_edit,
      ["ctrl-v"] = actions.file_vsplit
    }
  }
})

local auto_dark_mode = require('auto-dark-mode')
auto_dark_mode.setup({
	set_dark_mode = function()
		vim.api.nvim_set_option('background', 'dark')
    vim.cmd('colorscheme tokyonight-storm')
	end,
	set_light_mode = function()
		vim.api.nvim_set_option('background', 'light')
    vim.cmd('colorscheme tokyonight-day')
	end,
})

require("tokyonight").setup({
  style = "storm", -- The theme comes in three styles, `storm`, `moon`, a darker variant `night` and `day`
  light_style = "day", -- The theme is used when the background is set to light
  transparent = false, -- Enable this to disable setting the background color
  terminal_colors = true, -- Configure the colors used when opening a `:terminal` in [Neovim](https://github.com/neovim/neovim)
  styles = {
    -- Style to be applied to different syntax groups
    -- Value is any valid attr-list value for `:help nvim_set_hl`
    comments = { italic = false },
    keywords = { italic = false },
  },
  day_brightness = 0.3, -- Adjusts the brightness of the colors of the **Day** style. Number between 0 and 1, from dull to vibrant colors
  hide_inactive_statusline = false, -- Enabling this option, will hide inactive statuslines and replace them with a thin border instead. Should work with the standard **StatusLine** and **LuaLine**.
  dim_inactive = false, -- dims inactive windows
  lualine_bold = false, -- When `true`, section headers in the lualine theme will be bold

  --- You can override specific color groups to use other groups or a hex color
  --- function will be called with a ColorScheme table
  ---@param colors ColorScheme
  on_colors = function(colors) end,

  --- You can override specific highlights to use other groups or a hex color
  --- function will be called with a Highlights and ColorScheme table
  ---@param highlights Highlights
  ---@param colors ColorScheme
  on_highlights = function(highlights, colors) end,
})

require'lualine'.setup {
  options = {
    icons_enabled = false,
    component_separators = {},
    section_separators = {},
    disabled_filetypes = {}
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch'},
    lualine_c = {},
    lualine_x = {
      {
        require("noice").api.statusline.mode.get,
        cond = require("noice").api.statusline.mode.has,
        color = { fg = "#ff9e64" },
      }
    },
    lualine_y = {
      {
        'diagnostics',
        sources = {'coc'},
        sections = {'error', 'warn'},
        symbols = {error = 'coc errors: ', warn = 'warnings: ', info = 'info: '}
      }
    },
    lualine_z = {},
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {},
    lualine_x = {},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {},
  extensions = {}
}

require("notify").setup({
  timeout = 4000,
  stages = 'static'
})

require("gitlinker").setup({
  router = {
    browse = {
      ["^git%.treatwell%.net"] = require('gitlinker.routers').gitlab_browse,
    },
  }
})
EOF

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags='li\|p'

" Set <space> to leader
let mapleader=' '
let maplocalleader='\'

" Turn off swapfiles
set noswapfile
set nobackup
set nowb

" Allow editing of binary files
" Must be set before expandtab
" http://stackoverflow.com/a/26901774
set binary

set textwidth=80

" Use ``indent`` based folding
set foldmethod=indent
" Disable all folds on file open until `zc` or `zM` etc is used
set nofoldenable

" With :set hidden, opening a new file when the current buffer has unsaved
" changes causes files to be hidden instead of closed
set hidden

" Allow tab names to be remembered in sessions
set sessionoptions+=tabpages,globals

" Briefly move the cursor to the matching brace
set showmatch

" Don't display the current mode (Insert, Visual, Replace)
" in the status line. This info is already shown in the
" Airline status bar.
set noshowmode

" Stop vim trying to syntax highlight long lines, typically found in minified
" files. This greatly reduces lag yet is still wide enough for large displays
set synmaxcol=500

" Highlight current line
set cursorline

" Indent using two spaces.
set softtabstop=2
set tabstop=2
set shiftwidth=2

" Smoother scrolling when moving horizontally
set sidescroll=1

" Use spaces, not tabs
set expandtab

" Don't scan included files. The .tags file is more performant.
set complete-=i
set complete+=kspell

" Prevent autocomplete options opening in scratchpad
set completeopt-=preview

" This is set low so that gitgutter updates reasonably quickly
" https://github.com/airblade/vim-gitgutter#when-are-the-signs-updated
set updatetime=300

" Don't wrap lines
set nowrap

" Keep the cursor in the same place when switching buffers
set nostartofline

" Show col and line position in the statusbar
set ruler

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Ignore case of searches
set ignorecase

" If a pattern contains an uppercase letter
" it is case sensitive, otherwise, it is not
set smartcase

" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed

" Spell check
set spelllang=en

" Where it should get the dictionary files
let g:spellfile_URL = 'http://ftp.vim.org/vim/runtime/spell'

" For autocompletion, complete as much as you can.
set wildmode=list:longest,full

" don't add extra space after ., !, etc. when joining
set nojoinspaces

" Eliminate delay when switching modes
set ttimeoutlen=0

" Enable mouse with tmux
set mouse=a

" Auto save changes before switching buffer
set autowrite

" Add the g flag to search/replace by default
set gdefault

" Centralize backups, swapfiles and undo history
set backupdir=~/.config/nvim/backups
set directory=.,$TEMP " Stop the swp file warning

if has("persistent_undo")
  set undodir=~/.config/nvim/undo
  set undofile
  set undolevels=1000
  set undoreload=10000
endif

" Always show sign column for git icons
set signcolumn=yes

" Don’t create backups when editing files in certain directories
set backupskip=/tmp/*,/private/tmp/*

" Respect modeline in files
set modeline
set modelines=4

" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure

" Disable error bells
set noerrorbells

" Don't show the intro message when starting Vim
" Also suppress several 'Press Enter to continue messages' especially
" with FZF
set shortmess=aoOtIWcFs

" Show the current mode
set title

" Show the (partial) command as it’s being typed
set showcmd

" Line numbers
set number
set relativenumber

" Path and file extensions to look for when using `gf`
set suffixesadd+=.css,index.css,.js,.jsx,.scss
set path+=.,src

" Start scrolling before cursor gets to the edge
set scrolloff=3
set sidescrolloff=15
set sidescroll=1

" Remap annoying mistakes to something useful
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Qa q
cnoreabbrev Qall qall

" Key mappings
" ------------------------------------------------------------------------------

" gf but in a vsplit
nnoremap gv :vertical wincmd f<cr>

" Save file
nnoremap <silent><leader>w :silent wa<cr>

" Force j and k to work on display lines
nnoremap k gk
nnoremap j gj
vnoremap k gk
vnoremap j gj

" Delete line but preserve the space
nnoremap dD S<Esc>

" Make `Y` work from the cursor to the end of line
nnoremap Y y$

" Reformat whole file and move back to original position
nnoremap g= gg=G``

" Automatically jump to end of pasted text
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" Split
noremap <silent><leader>x :split<cr>
noremap <silent><leader>v :vsplit<cr>

" Spellcheck
nnoremap <F6> :setlocal spell!<cr>

" Clear search (highlight)
nnoremap <silent> <leader>k :noh<cr>

" Automatically 'gv' (go to previously selected visual block)
" after indenting or unindenting.
vnoremap < <gv
vnoremap > >gv

" Press enter for newline without insert
nnoremap <cr> o<esc>
" but don't effect command line mode
autocmd CmdwinEnter * nnoremap <CR> <CR>
autocmd CmdwinLeave * nnoremap <cr> o<esc>

" Allow sourcing of vimrc
nnoremap <leader>y :source $MYVIMRC<cr>

if exists(':tnoremap')
  " Allow movement seamlessly with terminals
  tnoremap <C-h> <C-\><C-n><C-w>h
  tnoremap <C-j> <C-\><C-n><C-w>j
  tnoremap <C-k> <C-\><C-n><C-w>k
  tnoremap <C-l> <C-\><C-n><C-w>l
  tnoremap <expr> <Esc> (&filetype == "fzf") ? "<Esc>" : "<c-\><c-n>"
endif

"  Plugin config
" ------------------------------------------------------------------------------
if s:has_plugin('vim-textobj-entire')
  let g:textobj_entire_no_default_key_mappings = 1
  xmap aE <Plug>(textobj-entire-a)
  omap aE <Plug>(textobj-entire-a)
  xmap iE <Plug>(textobj-entire-i)
  omap iE <Plug>(textobj-entire-i)
endif


if s:has_plugin('vim-slash')
  noremap <plug>(slash-after) zz
endif

if s:has_plugin('coc.nvim')
  " Remap keys for gotos
  nmap <silent> <leader>dr <Plug>(coc-references)
  nmap <silent> <leader>dR <Plug>(coc-refactor)
  nmap <silent> <leader>dd <Plug>(coc-implementation)
  nmap <silent> <leader>dy <Plug>(coc-type-definition)
  nmap <silent> <leader>dn <Plug>(coc-rename)
  nmap <silent> <leader>da <Plug>(coc-codeaction)
  nmap <silent> ]e :call CocAction('diagnosticNext')<cr>
  nmap <silent> [e :call CocAction('diagnosticPrevious')<cr>
  nmap <silent> <leader>e :CocDiagnostics<cr>

  nmap <silent> <leader>p :Prettier<cr>

  " restart coc because it breaks so often
  nmap <silent> <leader>r :CocRestart<cr>

  hi CocCodeLens guifg=#3a445e
  hi DiagnosticUnderlineError cterm=undercurl gui=undercurl guisp=#f38ba8

  nmap <silent> <leader>uf :CocList snippets<cr>

  inoremap <expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<CR>"

  " documentation popup
  nnoremap <silent> K :call <SID>show_documentation()<CR>
  function! s:show_documentation()
    if &filetype == 'vim'
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction
endif

if s:has_plugin('vim-subversive')
  nmap s <plug>(SubversiveSubstitute)
endif

if s:has_plugin('vim-cutlass')
  nnoremap m d
  xnoremap m d
  nnoremap mm dd
endif

if s:has_plugin('vim-bufonly')
  nnoremap <leader>B :BufOnly<cr>
endif

if s:has_plugin('ListToggle')
  let g:lt_location_list_toggle_map = '<leader>L'
endif

if s:has_plugin('vim-better-whitespace')
  highlight ExtraWhitespace ctermbg=red guibg = #e06c75
endif

lua << EOF
require('kommentary.config').configure_language("default", {
    prefer_single_line_comments = true,
})
EOF

if s:has_plugin('vim-astro')
  let g:astro_typescript = 'enable'
endif

if s:has_plugin('vim-session')
  let g:session_autosave = 'yes'
  let g:session_autoload = 'no'
endif

if s:has_plugin('vim-closetag')
  let g:closetag_filenames = "*.html,*.js,*.jsx"
  let g:closetag_close_shortcut = ''
endif

if s:has_plugin('vim-choosewin')
  let g:choosewin_label_fill = 0
  let g:choosewin_blink_on_land = 0
endif

if s:has_plugin('vim-bbye')
  nnoremap <silent>Q :silent Bdelete<cr>
endif

if s:has_plugin('taboo.vim')
  let g:taboo_renamed_tab_format = '%l%m'
  let g:taboo_close_tab_label = ''
  nnoremap th :tabprev<cr>
  nnoremap tl :tabnext<cr>
  nnoremap tn :tabnew<cr>
  nnoremap td :tabclose<cr>
  nnoremap to :TabooOpen<space>
  nnoremap tr :TabooRename<space>
endif

if s:has_plugin('nnn.vim')
  let g:nnn#set_default_mappings = 0
  nnoremap _ :NnnPicker %:p:h<cr>
  let g:nnn#command = 'nnn -d -H'
  let g:nnn#layout = 'enew'
  let g:nnn#action = {
        \ '<c-x>': 'split',
        \ '<c-v>': 'vsplit' }
endif

if s:has_plugin('gv.vim')
  nnoremap <c-g> :GV!<cr>
endif

if s:has_plugin('fzf-lua')
  nnoremap <c-p> :FzfLua files<cr>
  nnoremap <c-o> :FzfLua jumps<cr>
  nnoremap <Tab> :FzfLua buffers<cr>
  nnoremap <silent> <BS> :FzfLua command_history<cr>
endif

if s:has_plugin('ListToggle')
  let g:lt_height = 18
endif

lua << EOF
  vim.keymap.set('n', '<leader><space>', function ()
    require('leap').leap { target_windows = { vim.api.nvim_get_current_win() } }
  end)
EOF

if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag with ack.vim - https://github.com/ggreer/the_silver_searcher#vim
  let g:ackprg = 'ag --smart-case --nogroup --nocolor --column'
endif

if s:has_plugin('emmet-vim')
  imap hh <plug>(emmet-expand-abbr)
  let g:emmet_install_only_plug = 1
endif

" Automatic commands
" ------------------------------------------------------------------------------

" Open help in a vertical split
augroup vimrc-help
  autocmd!
  autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | setlocal relativenumber | endif
augroup END

" hide cursorline when buffer is inactive
augroup CrossHair
  au!
  au VimEnter * setlocal cursorline
  au WinEnter * setlocal cursorline
  au BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup end

augroup file-types
  autocmd!

  " Override some syntaxes so things look better
  autocmd BufNewFile,BufRead *.snap,*.es6, setlocal filetype=javascript.jsx
  autocmd BufNewFile,BufRead *stylelintrc,*eslintrc,*babelrc,*parcelrc,tsconfig.json setlocal filetype=json5

  " Wrap text and turn on spell for markdown files
  autocmd BufNewFile,BufRead *.md setlocal wrap linebreak spell filetype=markdown

  " Automatically wrap at 72 characters and spell check git commit messages
  autocmd FileType gitcommit setlocal textwidth=72
  autocmd FileType gitcommit setlocal spell

  " Allow stylesheets to autocomplete hyphenated words
  autocmd FileType css,scss,sass setlocal iskeyword+=-
augroup END

" Periodically check for file changes
augroup checktime
  autocmd!
  autocmd CursorHold * silent! checktime
augroup END

" Resize splits when vim changes size (like with tmux opening/closing)
augroup auto-resize
  autocmd!
  autocmd VimResized * wincmd =
augroup END

lua << EOF
vim.g.goyo_width = 120

function Goyo_enter()
  vim.api.nvim_set_option("showmode", false)
  vim.api.nvim_set_option("showcmd", false)
  require("lualine").hide()
end

function Goyo_leave()
  vim.api.nvim_set_option("showmode", true)
  vim.api.nvim_set_option("showcmd", true)
  require('lualine').hide({unhide=true})
  vim.cmd('source $MYVIMRC')
end

local GoyoGroup = vim.api.nvim_create_augroup("Goyo", { clear = true })
vim.api.nvim_create_autocmd("User", {
  pattern = "GoyoEnter",
  command = "lua Goyo_enter()",
  group = GoyoGroup,
})
vim.api.nvim_create_autocmd("User", {
  pattern = "GoyoLeave",
  command = "lua Goyo_leave()",
  group = GoyoGroup,
})
EOF

hi DiffChange guibg=#511e1e guifg=#eee
hi DiffDelete guibg=#3d432f guifg=#eee

lua << EOF
require'nvim-treesitter.configs'.setup {
  -- A list of parser names, or "all" (the five listed parsers should always be installed)
  ensure_installed = {
    "css",
    "html",
    "javascript",
    "json",
    "typescript",
    "scss",
    "vue",
    "astro",
    "dockerfile",
    "tsx",
    "c",
    "lua",
    "vim",
    "vimdoc",
    "query",
    "gitcommit",
    "diff",
    "git_rebase",
    "git_config"
},

  -- Automatically install missing parsers when entering buffer
  -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
  auto_install = true,

  highlight = {
    enable = true,
  },
}
EOF

lua << EOF
vim.keymap.set('n', '<leader>s', '<cmd>lua require("spectre").open()<CR>', {
  desc = "Open Spectre"
})
vim.keymap.set('n', '<leader>c', '<cmd>lua require("spectre").open_visual({select_word=true})<CR>', {
    desc = "Search current word"
})
require('spectre').setup({
  mappings={
    ['toggle_line'] = {
        map = "dd",
        cmd = "<cmd>lua require('spectre').toggle_line()<CR>",
        desc = "toggle current item"
    },
    ['enter_file'] = {
        map = "<cr>",
        cmd = "<cmd>lua require('spectre.actions').select_entry()<CR>",
        desc = "goto current file"
    },
    ['run_current_replace'] = {
      map = "<leader>rc",
      cmd = "<cmd>lua require('spectre.actions').run_current_replace()<CR>",
      desc = "replace current line"
    },
    ['run_replace'] = {
        map = "<leader>R",
        cmd = "<cmd>lua require('spectre.actions').run_replace()<CR>",
        desc = "replace all"
    },
  }
})
EOF

lua << EOF
require('gitsigns').setup({
  signs = {
    add          = { text = '█' },
    change       = { text = '█' },
    delete       = { text = '█' },
    topdelete    = { text = '█' },
    changedelete = { text = '█' },
    untracked    = { text = '┆' },
  },
  on_attach = function(bufnr)
    local gs = package.loaded.gitsigns

    local function map(mode, l, r, opts)
      opts = opts or {}
      opts.buffer = bufnr
      vim.keymap.set(mode, l, r, opts)
    end

    -- Navigation
    map('n', ']c', function()
      if vim.wo.diff then return ']c' end
      vim.schedule(function() gs.next_hunk() end)
      return '<Ignore>'
    end, {expr=true})

    map('n', '[c', function()
      if vim.wo.diff then return '[c' end
      vim.schedule(function() gs.prev_hunk() end)
      return '<Ignore>'
    end, {expr=true})
  end
})
EOF

lua << EOF
require("barbecue").setup({
  show_modified = true,
})
EOF
